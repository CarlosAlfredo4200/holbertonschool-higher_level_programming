The ``BaseGeometry`` module
==========================

Using ``BaseGeometry``
---------------------

First import ``BaseGeometry`` from the ``BaseGeometry`` module:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

	>>> bg = BaseGeometry()
	>>> type(bg)
	<class '7-base_geometry.BaseGeometry'>

	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

	>>> bg.integer_validator("myClass", 3.14)
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", "holberton")
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", True)
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", None)
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", {1, 2, 3})
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", (1, 2, 3))
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", [1, 2, 3])
	Traceback (most recent call last):
	TypeError: myClass must be an integer

	>>> bg.integer_validator("myClass", 0)
	Traceback (most recent call last):
	ValueError: myClass must be greater than 0

	>>> bg.integer_validator("myClass", -98)
	Traceback (most recent call last):
	ValueError: myClass must be greater than 0

	>>> bg.integer_validator("myClass", 98)

	>>> bg.integer_validator("myClass", (98))

	>>> bg.integer_validator("", 98)
